===================================================
{ Users }
===================================================

( 1 )[POST] /api/users/create => Create New User  
  
   {A} Fields required  ( Requests )
		name
		email
		password
		is_creator

   {B} api Response 	( Response )
   		_id
   		name
   		email
   			=> Storing Session in browser with user information 
   		redirectTo
   			=> redirect page "/home"

-----------------------------------------------------

( 2 )[POST] /api/users/login => Login New user
	
	{A} Fields Required ( Requests )
		email
		password

	{B} api Response	( Response )
		_id
		name
		email
			=> Storing Session in browser with user information 
		redirectTo
   			=> redirect page "/home"

-----------------------------------------------------

( 3 )[PATCH] /api/users/:uid/edit => Edit User 
	
	{ A } Fields Required ( Requests )
		name
		password
		email

	{ B } Response	( Response )
		name
		 _id
		email

-----------------------------------------------------

( 4 )[DELETE] /api/users/:uid/delete => Delete user 

	{ -- } Response	( Response )
		name
		 _id
		email

 




===================================================
{ Questionnaires }
===================================================

( 1 )[POST] /api/init => Create Questionnaire ( Details of application  with default Settings)  => initialization
	
	{ A } Fields Required ( Requests )
		1- Body Request
			+ app_type => ( 0 => survey or 1 => quiz )
		2- header
			+ x-auth => ( only any Admin user can do that)

	{ B } api Response	( Response )
		1- application details with default value 
		2- All default settings
		3- default empty array for questions 

-----------------------------------------------------

( 2 )[PATCH] /api/create => Create Questionnaire ( From Zero ) + empty Object|Array for settings and questions

	{ A } Fields Required ( Requests ) 
		1- Body Requests 
			+ app_type => ( 0 => survey or 1 => quiz )
			+ questionnaire_title
			+ description
		2- header
			+ x-auth => ( only any Admin user can do that)

	{ B } api Response	( Response )
		+ creator_id
		+ app_type
		+ questionnaire_title
		+ description
		+ _id
		+ updatedAt
		+ createdAt
		+ questions :[]

-----------------------------------------------------

( 3 )[PATCH] /api/:app_id/settings/create => Create OR Update Settings for specified app id 
	
	{ A } Fields Required ( Requests ) 
		1- Body Requests
			+ titles 
				-title_start_with
				-title_end_with
				-title_success_with
				-title_faild_with
			+ step_type
			+ grade_settings
				-is_graded
				-value
			+ review_setting
			+ retake_setting
			+ navigation_btns
			+ label_btns
				-lbl_start_with
				-lbl_continue_with
				-lbl_retake_with
				-lbl_review_with
			+ randomize_settings
			+ time_settings
				-is_with_time
				-value
				-timer_type
				-timer_layout
			+ progression_bar	
				-is_available
				-progression_bar_layout
		2- header
			+ x-auth => ( Only Admin user that created this app can do that)

    { B } api Response	( Response )
    	+ Only Response with application id , and Settings object

-----------------------------------------------------

( 4 )[PATCH] /:app_id/settings/style/:process => For Creating stylesheet page for this app ( Themes )
	
	(I) => Params
		"process" refer to ( create or edit or delete ) example : /:app_id/settings/style/create
	
	(II)============> Case "create"
			(A) => Fields Required ( Requests )  
				1- Body Requests
					+ source_codes ( optional ) => [] its an array 
						-class_name
						-classe_attributes
							-background
							-border
							-color
							-boxShadow
							-fontFamily
				Notes :- it is saving only 10 attributes as a maximum for each time
				2- header
					+ x-auth => ( Only Admin user that created this app can do that)
			{ B } api Response	( Response )
    			+ Only Response with File direcotry of this stylesheet , and empty array of "source_code" ( case  "source_codes" is not availabel in request) 
    			+ Only Response with File direcotry of this stylesheet , and Fill array of "source_code" ( case  "source_codes" is availabel in request) 
    			+ create file of stylesheet in server with styleshseet code ( in two both prevouse cases )
    (III)============> Case "edit"
    		(A) => Fields Required ( Requests )  
    			1- Body Request
    				+ theme_style_id (Required)
    				+ is_active (Optional)
    				+ source_codes ( optional ) => [] its an array  (Optional)
						-class_name
						-classe_attributes
							-background
							-border
							-color
							-boxShadow
							-fontFamily
				Notes :- it is saving only 10 attributes as a maximum for each time
				2- header
					+ x-auth => ( Only Admin user that created this app can do that)
			{ B } api Response	( Response )
    			+ Only Response with File direcotry of this stylesheet 
    			+ Append the new class object to the existing file 
    (IIV)============> Case "delete"
    		(A) => Fields Required ( Requests ) 
    			1- Body Request
    				+ theme_style_id (Required)
    			2- header
    				+ x-auth => ( Only Admin user that created this app can do that)
    		 { B } api Response	( Response )
    		 	+ response with success message including the stylesheet directory that deleted	

-----------------------------------------------------

( 5 )[PATCH] /:app_id/question/:process => for questions 

-----------------------------------------------------

(I) "process" parameters ( create edit delete ) => example /:app_id/question/create
	============> {1} create
	{ A } Fields Required ( Requests ) 
		1- Body Requests
			+ question_type (Required)
			+ question_body (Required)
			+ question_is_required (optional)
			+ media_question (optional)
				- media_type  (Required) => 0 or 1
				- media_name (Required)
				- media_field (Required)
			+ answer_settings
				- is_randomized
				- super_size
				- single_choice
				- choice_style
				- answer_char_max
		2- header
			+ x-auth => ( Only Admin user that created this app can do that)

	{ B }- API response 
		+ response with this question object including all details added ( qs details , settings of this qs )
		+ if (media_question) exists will save it in server and return direcory of this media with details of current question   

	============> {2} edit
	{ A } Fields Required ( Requests ) 
		1- Body Requests
			+ question_id (Required)
			+ question_body (optional)
			+ question_is_required (optional) 
			+ media_question (optional)
				- media_type  (optional) => 0 or 1
				- media_name (optional)
				- media_field (optional) if it under update the media_type will be require
			+ answer_settings
				- is_randomized optional)
				- super_size optional)
				- single_choice optional)
				- choice_style optional)
				- answer_char_max optional)
		2- header
			+ x-auth => ( Only Admin user that created this app can do that)

	{ B }- API response 
		+ response with this question object including all details added ( qs details , settings of this qs )
		+ if (media_question) with (media_field) will update and return direcory of this media with details of current question   

	============> {3} delete
	{ A } Fields Required ( Requests ) 
		1- Body Requests
			+ question_id (Required)
		2- header
			+ x-auth => ( Only Admin user that created this app can do that)
	{ B } Response with id of deleted question 




-----------------------------------------------------

( 6 )[PATCH] /:app_id/question/:process => for Question Answers 

-----------------------------------------------------
